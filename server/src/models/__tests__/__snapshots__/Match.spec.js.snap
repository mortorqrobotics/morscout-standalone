// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Model is same throughout 1`] = `
Schema {
  "$id": 1,
  "_indexes": Array [],
  "_userProvidedOptions": Object {},
  "aliases": Object {},
  "callQueue": Array [],
  "childSchemas": Array [],
  "inherits": Object {},
  "methodOptions": Object {},
  "methods": Object {},
  "nested": Object {},
  "obj": Object {
    "Regional": Object {
      "ref": "Regional",
      "type": [Function],
    },
    "blueAlliance": Object {
      "ref": "Alliance",
      "type": [Function],
    },
    "endData": Object {
      "type": [Function],
      "validate": [Function],
    },
    "redAlliance": Object {
      "ref": "Alliance",
      "type": [Function],
    },
    "startDate": Object {
      "type": [Function],
    },
    "winner": Object {
      "default": null,
      "enum": Array [
        "Red",
        "Blue",
      ],
      "type": [Function],
    },
  },
  "options": Object {
    "_id": true,
    "autoIndex": null,
    "bufferCommands": true,
    "capped": false,
    "discriminatorKey": "__t",
    "id": true,
    "minimize": true,
    "noId": false,
    "noVirtualId": false,
    "read": null,
    "shardKey": null,
    "strict": true,
    "typeKey": "type",
    "validateBeforeSave": true,
    "versionKey": "__v",
  },
  "paths": Object {
    "Regional": ObjectId {
      "_index": null,
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "ref": "Regional",
        "type": [Function],
      },
      "path": "Regional",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "_id": ObjectId {
      "_index": null,
      "defaultValue": [Function],
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "auto": true,
        "type": [Function],
      },
      "path": "_id",
      "setters": Array [
        [Function],
      ],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "blueAlliance": ObjectId {
      "_index": null,
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "ref": "Alliance",
        "type": [Function],
      },
      "path": "blueAlliance",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "endData": SchemaDate {
      "_index": null,
      "getters": Array [],
      "instance": "Date",
      "options": Object {
        "type": [Function],
        "validate": [Function],
      },
      "path": "endData",
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Validator failed for path \`{PATH}\` with value \`{VALUE}\`",
          "type": "user defined",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "redAlliance": ObjectId {
      "_index": null,
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "ref": "Alliance",
        "type": [Function],
      },
      "path": "redAlliance",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "startDate": SchemaDate {
      "_index": null,
      "getters": Array [],
      "instance": "Date",
      "options": Object {
        "type": [Function],
      },
      "path": "startDate",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "winner": SchemaString {
      "_index": null,
      "defaultValue": null,
      "enumValidator": [Function],
      "enumValues": Array [
        "Red",
        "Blue",
      ],
      "getters": Array [],
      "instance": "String",
      "options": Object {
        "default": null,
        "enum": Array [
          "Red",
          "Blue",
        ],
        "type": [Function],
      },
      "path": "winner",
      "regExp": null,
      "setters": Array [],
      "validators": Array [
        Object {
          "enumValues": Array [
            "Red",
            "Blue",
          ],
          "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
          "type": "enum",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
  },
  "plugins": Array [],
  "query": Object {},
  "s": Object {
    "hooks": Kareem {
      "_posts": Map {},
      "_pres": Map {},
    },
  },
  "singleNestedPaths": Object {},
  "statics": Object {},
  "subpaths": Object {},
  "tree": Object {
    "Regional": Object {
      "ref": "Regional",
      "type": [Function],
    },
    "_id": Object {
      "auto": true,
      "type": [Function],
    },
    "blueAlliance": Object {
      "ref": "Alliance",
      "type": [Function],
    },
    "endData": Object {
      "type": [Function],
      "validate": [Function],
    },
    "redAlliance": Object {
      "ref": "Alliance",
      "type": [Function],
    },
    "startDate": Object {
      "type": [Function],
    },
    "winner": Object {
      "default": null,
      "enum": Array [
        "Red",
        "Blue",
      ],
      "type": [Function],
    },
  },
  "virtuals": Object {},
}
`;

exports[`Model is same throughout 2`] = `[Function]`;
