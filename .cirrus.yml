container:
    image: node:dubnium-stretch

test_task:
  env:
    SNYK_API_KEY: ENCRYPTED[eac7bad296c62312d7ab0f4e53bbf159c77f9e59169950293bd8e93edb708689345f949fcfe6e47e7c0ea6af5cd2f4d5]
  container:
    matrix:
      image: node:stretch
      image: node:dubnium-stretch
    # additional_containers:
    #   - name: mongo
    #     image: mongo:latest
    #     port: 27017
    #     env:
    #       MONGO_INITDB_ROOT_USERNAME: ""
    #       MONGO_INITDB_ROOT_PASSWORD: ""
  node_modules_cache:
    folder: node_modules
    fingerprint_script: cat yarn.lock
    populate_script: yarn install
  login_script: yarn snyk auth $SNYK_API_KEY
  build_script: yarn build:server
  test_script: yarn run test

lint_task:
  node_modules_cache:
    folder: node_modules
    fingerprint_script: cat yarn.lock
    populate_script: yarn install
  lint_script: yarn run lint

docker_builder:
  depends_on: 
    - test
    - lint
  env:
    DOCKER_USERNAME: ENCRYPTED[c4ebf22212aa6eb1da6c1970dc80287abf298452717f00f7d993424346e31f0fd97113edd3af589e511ed1f27d4409e3]
    DOCKER_PASSWORD: ENCRYPTED[be48c52b4385a779d7c01a7d551b2b08439e93ef6ca81d6b42c811be31f8d59b19a80d31d61c10f5f5f4d2d0651ab4e7]
    NODE_VERSION: 10.13.0
    ARCH: x64
    YARN_VERSION: 1.10.1
  node_install_script:
    # - ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    #   case "${dpkgArch##*-}" in \
    #     amd64) ARCH='x64';; \
    #     ppc64el) ARCH='ppc64le';; \
    #     s390x) ARCH='s390x';; \
    #     arm64) ARCH='arm64';; \
    #     armhf) ARCH='armv7l';; \
    #     i386) ARCH='x86';; \
    #     *) echo "unsupported architecture"; exit 1 ;; \
    #   esac
    - set -x
    - curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz"
    - tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner
    - rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz"
    - ln -s /usr/local/bin/node /usr/local/bin/nodejs
  yarn_install_script:
    - curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz"
    - mkdir -p /opt
    - tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/
    - ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn
    - ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg
    - rm yarn-v$YARN_VERSION.tar.gz
  app_install_script: yarn install
  snyk_install_script: npm i -g snyk
  login_script: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  pull_script: docker pull $DOCKER_USERNAME/$CIRRUS_REPO_NAME:latest || true
  app_build_script:
    - yarn build:server
    - yarn build:app
  docker_build_script: docker build --file docker/Dockerfile.prod --cache-from $DOCKER_USERNAME/$CIRRUS_REPO_NAME:latest --tag $DOCKER_USERNAME/$CIRRUS_REPO_NAME:latest .
  test_script: snyk test --docker $DOCKER_USERNAME/$CIRRUS_REPO_NAME:latest || true
  push_script: docker push $DOCKER_USERNAME/$CIRRUS_REPO_NAME:latest