// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User is same throughout 1`] = `
Schema {
  "$id": 1,
  "_indexes": Array [],
  "_userProvidedOptions": Object {},
  "aliases": Object {},
  "callQueue": Array [],
  "childSchemas": Array [],
  "inherits": Object {},
  "methodOptions": Object {},
  "methods": Object {
    "comparePassword": [Function],
  },
  "nested": Object {},
  "obj": Object {
    "email": Object {
      "required": true,
      "type": [Function],
      "unique": true,
    },
    "firstname": Object {
      "required": true,
      "type": [Function],
    },
    "lastname": Object {
      "required": true,
      "type": [Function],
    },
    "mobileDeviceTokens": Object {
      "default": Array [],
      "type": Array [
        Object {
          "required": true,
          "type": [Function],
        },
      ],
    },
    "parentEmail": [Function],
    "password": Object {
      "required": true,
      "select": false,
      "type": [Function],
    },
    "phone": Object {
      "required": true,
      "type": [Function],
      "unique": true,
    },
    "position": Object {
      "enum": Array [
        "member",
        "leader",
        "mentor",
        "alumnus",
      ],
      "type": [Function],
    },
    "profpicpath": [Function],
    "scoutCaptain": Object {
      "default": false,
      "type": [Function],
    },
    "team": Object {
      "ref": "Team",
      "type": [Function],
    },
    "username": Object {
      "required": true,
      "type": [Function],
      "unique": true,
    },
  },
  "options": Object {
    "_id": true,
    "autoIndex": null,
    "bufferCommands": true,
    "capped": false,
    "discriminatorKey": "__t",
    "id": true,
    "minimize": true,
    "noId": false,
    "noVirtualId": false,
    "read": null,
    "shardKey": null,
    "strict": true,
    "typeKey": "type",
    "validateBeforeSave": true,
    "versionKey": "__v",
  },
  "paths": Object {
    "_id": ObjectId {
      "_index": null,
      "defaultValue": [Function],
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "auto": true,
        "type": [Function],
      },
      "path": "_id",
      "setters": Array [
        [Function],
      ],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "email": SchemaString {
      "_index": Object {
        "unique": true,
      },
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "isRequired": true,
      "options": Object {
        "required": true,
        "type": [Function],
        "unique": true,
      },
      "originalRequiredValue": true,
      "path": "email",
      "regExp": null,
      "requiredValidator": [Function],
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "firstname": SchemaString {
      "_index": null,
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "isRequired": true,
      "options": Object {
        "required": true,
        "type": [Function],
      },
      "originalRequiredValue": true,
      "path": "firstname",
      "regExp": null,
      "requiredValidator": [Function],
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "lastname": SchemaString {
      "_index": null,
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "isRequired": true,
      "options": Object {
        "required": true,
        "type": [Function],
      },
      "originalRequiredValue": true,
      "path": "lastname",
      "regExp": null,
      "requiredValidator": [Function],
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "mobileDeviceTokens": SchemaArray {
      "$isMongooseArray": true,
      "_index": null,
      "caster": SchemaString {
        "_index": null,
        "enumValues": Array [],
        "getters": Array [],
        "instance": "String",
        "isRequired": true,
        "options": Object {
          "required": true,
        },
        "originalRequiredValue": true,
        "path": "mobileDeviceTokens",
        "regExp": null,
        "requiredValidator": [Function],
        "setters": Array [],
        "validators": Array [
          Object {
            "message": "Path \`{PATH}\` is required.",
            "type": "required",
            "validator": [Function],
          },
        ],
        Symbol(mongoose#schemaType): true,
      },
      "casterConstructor": [Function],
      "defaultValue": [Function],
      "getters": Array [],
      "instance": "Array",
      "options": Object {
        "default": Array [],
        "type": Array [
          Object {
            "required": true,
            "type": [Function],
          },
        ],
      },
      "path": "mobileDeviceTokens",
      "schemaOptions": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "parentEmail": SchemaString {
      "_index": null,
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "options": Object {
        "type": [Function],
      },
      "path": "parentEmail",
      "regExp": null,
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "password": SchemaString {
      "_index": null,
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "isRequired": true,
      "options": Object {
        "required": true,
        "select": false,
        "type": [Function],
      },
      "originalRequiredValue": true,
      "path": "password",
      "regExp": null,
      "requiredValidator": [Function],
      "selected": false,
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "phone": SchemaString {
      "_index": Object {
        "unique": true,
      },
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "isRequired": true,
      "options": Object {
        "required": true,
        "type": [Function],
        "unique": true,
      },
      "originalRequiredValue": true,
      "path": "phone",
      "regExp": null,
      "requiredValidator": [Function],
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "position": SchemaString {
      "_index": null,
      "enumValidator": [Function],
      "enumValues": Array [
        "member",
        "leader",
        "mentor",
        "alumnus",
      ],
      "getters": Array [],
      "instance": "String",
      "options": Object {
        "enum": Array [
          "member",
          "leader",
          "mentor",
          "alumnus",
        ],
        "type": [Function],
      },
      "path": "position",
      "regExp": null,
      "setters": Array [],
      "validators": Array [
        Object {
          "enumValues": Array [
            "member",
            "leader",
            "mentor",
            "alumnus",
          ],
          "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
          "type": "enum",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "profpicpath": SchemaString {
      "_index": null,
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "options": Object {
        "type": [Function],
      },
      "path": "profpicpath",
      "regExp": null,
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "scoutCaptain": SchemaBoolean {
      "_index": null,
      "defaultValue": false,
      "getters": Array [],
      "instance": "Boolean",
      "options": Object {
        "default": false,
        "type": [Function],
      },
      "path": "scoutCaptain",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "team": ObjectId {
      "_index": null,
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "ref": "Team",
        "type": [Function],
      },
      "path": "team",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "username": SchemaString {
      "_index": Object {
        "unique": true,
      },
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "isRequired": true,
      "options": Object {
        "required": true,
        "type": [Function],
        "unique": true,
      },
      "originalRequiredValue": true,
      "path": "username",
      "regExp": null,
      "requiredValidator": [Function],
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
  },
  "plugins": Array [],
  "query": Object {},
  "s": Object {
    "hooks": Kareem {
      "_posts": Map {},
      "_pres": Map {
        "save" => Array [
          Object {
            "fn": [Function],
            "isAsync": false,
          },
          Object {
            "fn": [Function],
            "isAsync": false,
          },
        ],
      },
    },
  },
  "singleNestedPaths": Object {},
  "statics": Object {},
  "subpaths": Object {},
  "tree": Object {
    "_id": Object {
      "auto": true,
      "type": [Function],
    },
    "email": Object {
      "required": true,
      "type": [Function],
      "unique": true,
    },
    "firstname": Object {
      "required": true,
      "type": [Function],
    },
    "lastname": Object {
      "required": true,
      "type": [Function],
    },
    "mobileDeviceTokens": Object {
      "default": Array [],
      "type": Array [
        Object {
          "required": true,
          "type": [Function],
        },
      ],
    },
    "parentEmail": [Function],
    "password": Object {
      "required": true,
      "select": false,
      "type": [Function],
    },
    "phone": Object {
      "required": true,
      "type": [Function],
      "unique": true,
    },
    "position": Object {
      "enum": Array [
        "member",
        "leader",
        "mentor",
        "alumnus",
      ],
      "type": [Function],
    },
    "profpicpath": [Function],
    "scoutCaptain": Object {
      "default": false,
      "type": [Function],
    },
    "team": Object {
      "ref": "Team",
      "type": [Function],
    },
    "username": Object {
      "required": true,
      "type": [Function],
      "unique": true,
    },
  },
  "virtuals": Object {},
}
`;
