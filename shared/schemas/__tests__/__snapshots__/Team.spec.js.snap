// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Team is same throughout 1`] = `
Schema {
  "$id": 7,
  "_indexes": Array [],
  "_userProvidedOptions": Object {},
  "aliases": Object {},
  "callQueue": Array [],
  "childSchemas": Array [
    Object {
      "model": [Function],
      "schema": Schema {
        "$id": 1,
        "_indexes": Array [],
        "_userProvidedOptions": Object {},
        "aliases": Object {},
        "callQueue": Array [],
        "childSchemas": Array [],
        "inherits": Object {},
        "methodOptions": Object {},
        "methods": Object {},
        "nested": Object {},
        "obj": Object {
          "coordinates": Object {
            "required": true,
            "type": Array [
              [Function],
            ],
            "validate": [Function],
          },
          "type": Object {
            "default": "Point",
            "enum": Array [
              "Point",
            ],
            "required": true,
            "type": [Function],
          },
        },
        "options": Object {
          "_id": true,
          "autoIndex": null,
          "bufferCommands": true,
          "capped": false,
          "discriminatorKey": "__t",
          "id": true,
          "minimize": true,
          "noId": false,
          "noVirtualId": false,
          "read": null,
          "shardKey": null,
          "strict": true,
          "typeKey": "type",
          "validateBeforeSave": true,
          "versionKey": "__v",
        },
        "paths": Object {
          "_id": ObjectId {
            "_index": null,
            "defaultValue": [Function],
            "getters": Array [],
            "instance": "ObjectID",
            "options": Object {
              "auto": true,
              "type": [Function],
            },
            "path": "_id",
            "setters": Array [
              [Function],
            ],
            "validators": Array [],
            Symbol(mongoose#schemaType): true,
          },
          "coordinates": SchemaArray {
            "$isMongooseArray": true,
            "_index": null,
            "caster": SchemaNumber {
              "_index": null,
              "getters": Array [],
              "instance": "Number",
              "options": Object {},
              "path": "coordinates",
              "setters": Array [],
              "validators": Array [],
              Symbol(mongoose#schemaType): true,
            },
            "casterConstructor": [Function],
            "defaultValue": [Function],
            "getters": Array [],
            "instance": "Array",
            "isRequired": true,
            "options": Object {
              "required": true,
              "type": Array [
                [Function],
              ],
              "validate": [Function],
            },
            "originalRequiredValue": true,
            "path": "coordinates",
            "requiredValidator": [Function],
            "schemaOptions": Object {
              "_id": true,
              "autoIndex": null,
              "bufferCommands": true,
              "capped": false,
              "discriminatorKey": "__t",
              "id": true,
              "minimize": true,
              "noId": false,
              "noVirtualId": false,
              "read": null,
              "shardKey": null,
              "strict": true,
              "typeKey": "type",
              "validateBeforeSave": true,
              "versionKey": "__v",
            },
            "setters": Array [],
            "validators": Array [
              Object {
                "message": "Path \`{PATH}\` is required.",
                "type": "required",
                "validator": [Function],
              },
              Object {
                "message": "Validator failed for path \`{PATH}\` with value \`{VALUE}\`",
                "type": "user defined",
                "validator": [Function],
              },
            ],
            Symbol(mongoose#schemaType): true,
          },
          "type": SchemaString {
            "_index": null,
            "defaultValue": "Point",
            "enumValidator": [Function],
            "enumValues": Array [
              "Point",
            ],
            "getters": Array [],
            "instance": "String",
            "isRequired": true,
            "options": Object {
              "default": "Point",
              "enum": Array [
                "Point",
              ],
              "required": true,
              "type": [Function],
            },
            "originalRequiredValue": true,
            "path": "type",
            "regExp": null,
            "requiredValidator": [Function],
            "setters": Array [],
            "validators": Array [
              Object {
                "message": "Path \`{PATH}\` is required.",
                "type": "required",
                "validator": [Function],
              },
              Object {
                "enumValues": Array [
                  "Point",
                ],
                "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
                "type": "enum",
                "validator": [Function],
              },
            ],
            Symbol(mongoose#schemaType): true,
          },
        },
        "plugins": Array [
          Object {
            "fn": [Function],
            "opts": Object {
              "deduplicate": true,
            },
          },
        ],
        "query": Object {},
        "s": Object {
          "hooks": Kareem {
            "_posts": Map {},
            "_pres": Map {},
          },
        },
        "singleNestedPaths": Object {},
        "statics": Object {},
        "subpaths": Object {},
        "tree": Object {
          "_id": Object {
            "auto": true,
            "type": [Function],
          },
          "coordinates": Object {
            "required": true,
            "type": Array [
              [Function],
            ],
            "validate": [Function],
          },
          "id": VirtualType {
            "getters": Array [
              [Function],
            ],
            "options": Object {},
            "path": "id",
            "setters": Array [],
          },
          "type": Object {
            "default": "Point",
            "enum": Array [
              "Point",
            ],
            "required": true,
            "type": [Function],
          },
        },
        "virtuals": Object {
          "id": VirtualType {
            "getters": Array [
              [Function],
            ],
            "options": Object {},
            "path": "id",
            "setters": Array [],
          },
        },
      },
    },
  ],
  "inherits": Object {},
  "methodOptions": Object {},
  "methods": Object {},
  "nested": Object {
    "awards": true,
  },
  "obj": Object {
    "awards": Object {
      "Type": [Function],
    },
    "location": Schema {
      "$id": 1,
      "_indexes": Array [],
      "_userProvidedOptions": Object {},
      "aliases": Object {},
      "callQueue": Array [],
      "childSchemas": Array [],
      "inherits": Object {},
      "methodOptions": Object {},
      "methods": Object {},
      "nested": Object {},
      "obj": Object {
        "coordinates": Object {
          "required": true,
          "type": Array [
            [Function],
          ],
          "validate": [Function],
        },
        "type": Object {
          "default": "Point",
          "enum": Array [
            "Point",
          ],
          "required": true,
          "type": [Function],
        },
      },
      "options": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "paths": Object {
        "_id": ObjectId {
          "_index": null,
          "defaultValue": [Function],
          "getters": Array [],
          "instance": "ObjectID",
          "options": Object {
            "auto": true,
            "type": [Function],
          },
          "path": "_id",
          "setters": Array [
            [Function],
          ],
          "validators": Array [],
          Symbol(mongoose#schemaType): true,
        },
        "coordinates": SchemaArray {
          "$isMongooseArray": true,
          "_index": null,
          "caster": SchemaNumber {
            "_index": null,
            "getters": Array [],
            "instance": "Number",
            "options": Object {},
            "path": "coordinates",
            "setters": Array [],
            "validators": Array [],
            Symbol(mongoose#schemaType): true,
          },
          "casterConstructor": [Function],
          "defaultValue": [Function],
          "getters": Array [],
          "instance": "Array",
          "isRequired": true,
          "options": Object {
            "required": true,
            "type": Array [
              [Function],
            ],
            "validate": [Function],
          },
          "originalRequiredValue": true,
          "path": "coordinates",
          "requiredValidator": [Function],
          "schemaOptions": Object {
            "_id": true,
            "autoIndex": null,
            "bufferCommands": true,
            "capped": false,
            "discriminatorKey": "__t",
            "id": true,
            "minimize": true,
            "noId": false,
            "noVirtualId": false,
            "read": null,
            "shardKey": null,
            "strict": true,
            "typeKey": "type",
            "validateBeforeSave": true,
            "versionKey": "__v",
          },
          "setters": Array [],
          "validators": Array [
            Object {
              "message": "Path \`{PATH}\` is required.",
              "type": "required",
              "validator": [Function],
            },
            Object {
              "message": "Validator failed for path \`{PATH}\` with value \`{VALUE}\`",
              "type": "user defined",
              "validator": [Function],
            },
          ],
          Symbol(mongoose#schemaType): true,
        },
        "type": SchemaString {
          "_index": null,
          "defaultValue": "Point",
          "enumValidator": [Function],
          "enumValues": Array [
            "Point",
          ],
          "getters": Array [],
          "instance": "String",
          "isRequired": true,
          "options": Object {
            "default": "Point",
            "enum": Array [
              "Point",
            ],
            "required": true,
            "type": [Function],
          },
          "originalRequiredValue": true,
          "path": "type",
          "regExp": null,
          "requiredValidator": [Function],
          "setters": Array [],
          "validators": Array [
            Object {
              "message": "Path \`{PATH}\` is required.",
              "type": "required",
              "validator": [Function],
            },
            Object {
              "enumValues": Array [
                "Point",
              ],
              "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
              "type": "enum",
              "validator": [Function],
            },
          ],
          Symbol(mongoose#schemaType): true,
        },
      },
      "plugins": Array [
        Object {
          "fn": [Function],
          "opts": Object {
            "deduplicate": true,
          },
        },
      ],
      "query": Object {},
      "s": Object {
        "hooks": Kareem {
          "_posts": Map {},
          "_pres": Map {},
        },
      },
      "singleNestedPaths": Object {},
      "statics": Object {},
      "subpaths": Object {},
      "tree": Object {
        "_id": Object {
          "auto": true,
          "type": [Function],
        },
        "coordinates": Object {
          "required": true,
          "type": Array [
            [Function],
          ],
          "validate": [Function],
        },
        "id": VirtualType {
          "getters": Array [
            [Function],
          ],
          "options": Object {},
          "path": "id",
          "setters": Array [],
        },
        "type": Object {
          "default": "Point",
          "enum": Array [
            "Point",
          ],
          "required": true,
          "type": [Function],
        },
      },
      "virtuals": Object {
        "id": VirtualType {
          "getters": Array [
            [Function],
          ],
          "options": Object {},
          "path": "id",
          "setters": Array [],
        },
      },
    },
    "name": Object {
      "type": [Function],
    },
    "number": Object {
      "type": [Function],
      "validate": Object {
        "message": "{ Value } is not a legal team number",
        "validator": [Function],
      },
    },
    "registeredRegionals": Array [
      Object {
        "ref": "Regional",
        "type": [Function],
      },
    ],
  },
  "options": Object {
    "_id": true,
    "autoIndex": null,
    "bufferCommands": true,
    "capped": false,
    "discriminatorKey": "__t",
    "id": true,
    "minimize": true,
    "noId": false,
    "noVirtualId": false,
    "read": null,
    "shardKey": null,
    "strict": true,
    "typeKey": "type",
    "validateBeforeSave": true,
    "versionKey": "__v",
  },
  "paths": Object {
    "_id": ObjectId {
      "_index": null,
      "defaultValue": [Function],
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "auto": true,
        "type": [Function],
      },
      "path": "_id",
      "setters": Array [
        [Function],
      ],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "awards.Type": Map {
      "$__schemaType": Mixed {
        "_index": null,
        "getters": Array [],
        "instance": "Mixed",
        "options": Object {
          "type": Object {},
        },
        "path": "awards.Type.$*",
        "setters": Array [],
        "validators": Array [],
        Symbol(mongoose#schemaType): true,
        Symbol(mongoose:schema_mixed): true,
      },
      "$isSchemaMap": true,
      "_index": null,
      "getters": Array [],
      "instance": "Map",
      "options": Object {
        "type": [Function],
      },
      "path": "awards.Type",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "awards.Type.$*": Mixed {
      "_index": null,
      "getters": Array [],
      "instance": "Mixed",
      "options": Object {
        "type": Object {},
      },
      "path": "awards.Type.$*",
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
      Symbol(mongoose:schema_mixed): true,
    },
    "location": Embedded {
      "$isSingleNested": true,
      "_index": null,
      "caster": [Function],
      "getters": Array [],
      "instance": "Embedded",
      "options": Object {
        "type": Schema {
          "$id": 1,
          "_indexes": Array [],
          "_userProvidedOptions": Object {},
          "aliases": Object {},
          "callQueue": Array [],
          "childSchemas": Array [],
          "inherits": Object {},
          "methodOptions": Object {},
          "methods": Object {},
          "nested": Object {},
          "obj": Object {
            "coordinates": Object {
              "required": true,
              "type": Array [
                [Function],
              ],
              "validate": [Function],
            },
            "type": Object {
              "default": "Point",
              "enum": Array [
                "Point",
              ],
              "required": true,
              "type": [Function],
            },
          },
          "options": Object {
            "_id": true,
            "autoIndex": null,
            "bufferCommands": true,
            "capped": false,
            "discriminatorKey": "__t",
            "id": true,
            "minimize": true,
            "noId": false,
            "noVirtualId": false,
            "read": null,
            "shardKey": null,
            "strict": true,
            "typeKey": "type",
            "validateBeforeSave": true,
            "versionKey": "__v",
          },
          "paths": Object {
            "_id": ObjectId {
              "_index": null,
              "defaultValue": [Function],
              "getters": Array [],
              "instance": "ObjectID",
              "options": Object {
                "auto": true,
                "type": [Function],
              },
              "path": "_id",
              "setters": Array [
                [Function],
              ],
              "validators": Array [],
              Symbol(mongoose#schemaType): true,
            },
            "coordinates": SchemaArray {
              "$isMongooseArray": true,
              "_index": null,
              "caster": SchemaNumber {
                "_index": null,
                "getters": Array [],
                "instance": "Number",
                "options": Object {},
                "path": "coordinates",
                "setters": Array [],
                "validators": Array [],
                Symbol(mongoose#schemaType): true,
              },
              "casterConstructor": [Function],
              "defaultValue": [Function],
              "getters": Array [],
              "instance": "Array",
              "isRequired": true,
              "options": Object {
                "required": true,
                "type": Array [
                  [Function],
                ],
                "validate": [Function],
              },
              "originalRequiredValue": true,
              "path": "coordinates",
              "requiredValidator": [Function],
              "schemaOptions": Object {
                "_id": true,
                "autoIndex": null,
                "bufferCommands": true,
                "capped": false,
                "discriminatorKey": "__t",
                "id": true,
                "minimize": true,
                "noId": false,
                "noVirtualId": false,
                "read": null,
                "shardKey": null,
                "strict": true,
                "typeKey": "type",
                "validateBeforeSave": true,
                "versionKey": "__v",
              },
              "setters": Array [],
              "validators": Array [
                Object {
                  "message": "Path \`{PATH}\` is required.",
                  "type": "required",
                  "validator": [Function],
                },
                Object {
                  "message": "Validator failed for path \`{PATH}\` with value \`{VALUE}\`",
                  "type": "user defined",
                  "validator": [Function],
                },
              ],
              Symbol(mongoose#schemaType): true,
            },
            "type": SchemaString {
              "_index": null,
              "defaultValue": "Point",
              "enumValidator": [Function],
              "enumValues": Array [
                "Point",
              ],
              "getters": Array [],
              "instance": "String",
              "isRequired": true,
              "options": Object {
                "default": "Point",
                "enum": Array [
                  "Point",
                ],
                "required": true,
                "type": [Function],
              },
              "originalRequiredValue": true,
              "path": "type",
              "regExp": null,
              "requiredValidator": [Function],
              "setters": Array [],
              "validators": Array [
                Object {
                  "message": "Path \`{PATH}\` is required.",
                  "type": "required",
                  "validator": [Function],
                },
                Object {
                  "enumValues": Array [
                    "Point",
                  ],
                  "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
                  "type": "enum",
                  "validator": [Function],
                },
              ],
              Symbol(mongoose#schemaType): true,
            },
          },
          "plugins": Array [
            Object {
              "fn": [Function],
              "opts": Object {
                "deduplicate": true,
              },
            },
          ],
          "query": Object {},
          "s": Object {
            "hooks": Kareem {
              "_posts": Map {},
              "_pres": Map {},
            },
          },
          "singleNestedPaths": Object {},
          "statics": Object {},
          "subpaths": Object {},
          "tree": Object {
            "_id": Object {
              "auto": true,
              "type": [Function],
            },
            "coordinates": Object {
              "required": true,
              "type": Array [
                [Function],
              ],
              "validate": [Function],
            },
            "id": VirtualType {
              "getters": Array [
                [Function],
              ],
              "options": Object {},
              "path": "id",
              "setters": Array [],
            },
            "type": Object {
              "default": "Point",
              "enum": Array [
                "Point",
              ],
              "required": true,
              "type": [Function],
            },
          },
          "virtuals": Object {
            "id": VirtualType {
              "getters": Array [
                [Function],
              ],
              "options": Object {},
              "path": "id",
              "setters": Array [],
            },
          },
        },
      },
      "path": "location",
      "schema": Schema {
        "$id": 1,
        "_indexes": Array [],
        "_userProvidedOptions": Object {},
        "aliases": Object {},
        "callQueue": Array [],
        "childSchemas": Array [],
        "inherits": Object {},
        "methodOptions": Object {},
        "methods": Object {},
        "nested": Object {},
        "obj": Object {
          "coordinates": Object {
            "required": true,
            "type": Array [
              [Function],
            ],
            "validate": [Function],
          },
          "type": Object {
            "default": "Point",
            "enum": Array [
              "Point",
            ],
            "required": true,
            "type": [Function],
          },
        },
        "options": Object {
          "_id": true,
          "autoIndex": null,
          "bufferCommands": true,
          "capped": false,
          "discriminatorKey": "__t",
          "id": true,
          "minimize": true,
          "noId": false,
          "noVirtualId": false,
          "read": null,
          "shardKey": null,
          "strict": true,
          "typeKey": "type",
          "validateBeforeSave": true,
          "versionKey": "__v",
        },
        "paths": Object {
          "_id": ObjectId {
            "_index": null,
            "defaultValue": [Function],
            "getters": Array [],
            "instance": "ObjectID",
            "options": Object {
              "auto": true,
              "type": [Function],
            },
            "path": "_id",
            "setters": Array [
              [Function],
            ],
            "validators": Array [],
            Symbol(mongoose#schemaType): true,
          },
          "coordinates": SchemaArray {
            "$isMongooseArray": true,
            "_index": null,
            "caster": SchemaNumber {
              "_index": null,
              "getters": Array [],
              "instance": "Number",
              "options": Object {},
              "path": "coordinates",
              "setters": Array [],
              "validators": Array [],
              Symbol(mongoose#schemaType): true,
            },
            "casterConstructor": [Function],
            "defaultValue": [Function],
            "getters": Array [],
            "instance": "Array",
            "isRequired": true,
            "options": Object {
              "required": true,
              "type": Array [
                [Function],
              ],
              "validate": [Function],
            },
            "originalRequiredValue": true,
            "path": "coordinates",
            "requiredValidator": [Function],
            "schemaOptions": Object {
              "_id": true,
              "autoIndex": null,
              "bufferCommands": true,
              "capped": false,
              "discriminatorKey": "__t",
              "id": true,
              "minimize": true,
              "noId": false,
              "noVirtualId": false,
              "read": null,
              "shardKey": null,
              "strict": true,
              "typeKey": "type",
              "validateBeforeSave": true,
              "versionKey": "__v",
            },
            "setters": Array [],
            "validators": Array [
              Object {
                "message": "Path \`{PATH}\` is required.",
                "type": "required",
                "validator": [Function],
              },
              Object {
                "message": "Validator failed for path \`{PATH}\` with value \`{VALUE}\`",
                "type": "user defined",
                "validator": [Function],
              },
            ],
            Symbol(mongoose#schemaType): true,
          },
          "type": SchemaString {
            "_index": null,
            "defaultValue": "Point",
            "enumValidator": [Function],
            "enumValues": Array [
              "Point",
            ],
            "getters": Array [],
            "instance": "String",
            "isRequired": true,
            "options": Object {
              "default": "Point",
              "enum": Array [
                "Point",
              ],
              "required": true,
              "type": [Function],
            },
            "originalRequiredValue": true,
            "path": "type",
            "regExp": null,
            "requiredValidator": [Function],
            "setters": Array [],
            "validators": Array [
              Object {
                "message": "Path \`{PATH}\` is required.",
                "type": "required",
                "validator": [Function],
              },
              Object {
                "enumValues": Array [
                  "Point",
                ],
                "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
                "type": "enum",
                "validator": [Function],
              },
            ],
            Symbol(mongoose#schemaType): true,
          },
        },
        "plugins": Array [
          Object {
            "fn": [Function],
            "opts": Object {
              "deduplicate": true,
            },
          },
        ],
        "query": Object {},
        "s": Object {
          "hooks": Kareem {
            "_posts": Map {},
            "_pres": Map {},
          },
        },
        "singleNestedPaths": Object {},
        "statics": Object {},
        "subpaths": Object {},
        "tree": Object {
          "_id": Object {
            "auto": true,
            "type": [Function],
          },
          "coordinates": Object {
            "required": true,
            "type": Array [
              [Function],
            ],
            "validate": [Function],
          },
          "id": VirtualType {
            "getters": Array [
              [Function],
            ],
            "options": Object {},
            "path": "id",
            "setters": Array [],
          },
          "type": Object {
            "default": "Point",
            "enum": Array [
              "Point",
            ],
            "required": true,
            "type": [Function],
          },
        },
        "virtuals": Object {
          "id": VirtualType {
            "getters": Array [
              [Function],
            ],
            "options": Object {},
            "path": "id",
            "setters": Array [],
          },
        },
      },
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "name": SchemaString {
      "_index": null,
      "enumValues": Array [],
      "getters": Array [],
      "instance": "String",
      "options": Object {
        "type": [Function],
      },
      "path": "name",
      "regExp": null,
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "number": SchemaNumber {
      "_index": null,
      "getters": Array [],
      "instance": "Number",
      "options": Object {
        "type": [Function],
        "validate": Object {
          "message": "{ Value } is not a legal team number",
          "validator": [Function],
        },
      },
      "path": "number",
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "{ Value } is not a legal team number",
          "type": "user defined",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "registeredRegionals": SchemaArray {
      "$isMongooseArray": true,
      "_index": null,
      "caster": ObjectId {
        "_index": null,
        "getters": Array [],
        "instance": "ObjectID",
        "options": Object {
          "ref": "Regional",
        },
        "path": "registeredRegionals",
        "setters": Array [],
        "validators": Array [],
        Symbol(mongoose#schemaType): true,
      },
      "casterConstructor": [Function],
      "defaultValue": [Function],
      "getters": Array [],
      "instance": "Array",
      "options": Object {
        "type": Array [
          Object {
            "ref": "Regional",
            "type": [Function],
          },
        ],
      },
      "path": "registeredRegionals",
      "schemaOptions": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "setters": Array [],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
  },
  "plugins": Array [],
  "query": Object {},
  "s": Object {
    "hooks": Kareem {
      "_posts": Map {},
      "_pres": Map {},
    },
  },
  "singleNestedPaths": Object {
    "location._id": ObjectId {
      "_index": null,
      "defaultValue": [Function],
      "getters": Array [],
      "instance": "ObjectID",
      "options": Object {
        "auto": true,
        "type": [Function],
      },
      "path": "_id",
      "setters": Array [
        [Function],
      ],
      "validators": Array [],
      Symbol(mongoose#schemaType): true,
    },
    "location.coordinates": SchemaArray {
      "$isMongooseArray": true,
      "_index": null,
      "caster": SchemaNumber {
        "_index": null,
        "getters": Array [],
        "instance": "Number",
        "options": Object {},
        "path": "coordinates",
        "setters": Array [],
        "validators": Array [],
        Symbol(mongoose#schemaType): true,
      },
      "casterConstructor": [Function],
      "defaultValue": [Function],
      "getters": Array [],
      "instance": "Array",
      "isRequired": true,
      "options": Object {
        "required": true,
        "type": Array [
          [Function],
        ],
        "validate": [Function],
      },
      "originalRequiredValue": true,
      "path": "coordinates",
      "requiredValidator": [Function],
      "schemaOptions": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
        Object {
          "message": "Validator failed for path \`{PATH}\` with value \`{VALUE}\`",
          "type": "user defined",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
    "location.type": SchemaString {
      "_index": null,
      "defaultValue": "Point",
      "enumValidator": [Function],
      "enumValues": Array [
        "Point",
      ],
      "getters": Array [],
      "instance": "String",
      "isRequired": true,
      "options": Object {
        "default": "Point",
        "enum": Array [
          "Point",
        ],
        "required": true,
        "type": [Function],
      },
      "originalRequiredValue": true,
      "path": "type",
      "regExp": null,
      "requiredValidator": [Function],
      "setters": Array [],
      "validators": Array [
        Object {
          "message": "Path \`{PATH}\` is required.",
          "type": "required",
          "validator": [Function],
        },
        Object {
          "enumValues": Array [
            "Point",
          ],
          "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
          "type": "enum",
          "validator": [Function],
        },
      ],
      Symbol(mongoose#schemaType): true,
    },
  },
  "statics": Object {},
  "subpaths": Object {},
  "tree": Object {
    "_id": Object {
      "auto": true,
      "type": [Function],
    },
    "awards": Object {
      "Type": [Function],
    },
    "location": Schema {
      "$id": 1,
      "_indexes": Array [],
      "_userProvidedOptions": Object {},
      "aliases": Object {},
      "callQueue": Array [],
      "childSchemas": Array [],
      "inherits": Object {},
      "methodOptions": Object {},
      "methods": Object {},
      "nested": Object {},
      "obj": Object {
        "coordinates": Object {
          "required": true,
          "type": Array [
            [Function],
          ],
          "validate": [Function],
        },
        "type": Object {
          "default": "Point",
          "enum": Array [
            "Point",
          ],
          "required": true,
          "type": [Function],
        },
      },
      "options": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "paths": Object {
        "_id": ObjectId {
          "_index": null,
          "defaultValue": [Function],
          "getters": Array [],
          "instance": "ObjectID",
          "options": Object {
            "auto": true,
            "type": [Function],
          },
          "path": "_id",
          "setters": Array [
            [Function],
          ],
          "validators": Array [],
          Symbol(mongoose#schemaType): true,
        },
        "coordinates": SchemaArray {
          "$isMongooseArray": true,
          "_index": null,
          "caster": SchemaNumber {
            "_index": null,
            "getters": Array [],
            "instance": "Number",
            "options": Object {},
            "path": "coordinates",
            "setters": Array [],
            "validators": Array [],
            Symbol(mongoose#schemaType): true,
          },
          "casterConstructor": [Function],
          "defaultValue": [Function],
          "getters": Array [],
          "instance": "Array",
          "isRequired": true,
          "options": Object {
            "required": true,
            "type": Array [
              [Function],
            ],
            "validate": [Function],
          },
          "originalRequiredValue": true,
          "path": "coordinates",
          "requiredValidator": [Function],
          "schemaOptions": Object {
            "_id": true,
            "autoIndex": null,
            "bufferCommands": true,
            "capped": false,
            "discriminatorKey": "__t",
            "id": true,
            "minimize": true,
            "noId": false,
            "noVirtualId": false,
            "read": null,
            "shardKey": null,
            "strict": true,
            "typeKey": "type",
            "validateBeforeSave": true,
            "versionKey": "__v",
          },
          "setters": Array [],
          "validators": Array [
            Object {
              "message": "Path \`{PATH}\` is required.",
              "type": "required",
              "validator": [Function],
            },
            Object {
              "message": "Validator failed for path \`{PATH}\` with value \`{VALUE}\`",
              "type": "user defined",
              "validator": [Function],
            },
          ],
          Symbol(mongoose#schemaType): true,
        },
        "type": SchemaString {
          "_index": null,
          "defaultValue": "Point",
          "enumValidator": [Function],
          "enumValues": Array [
            "Point",
          ],
          "getters": Array [],
          "instance": "String",
          "isRequired": true,
          "options": Object {
            "default": "Point",
            "enum": Array [
              "Point",
            ],
            "required": true,
            "type": [Function],
          },
          "originalRequiredValue": true,
          "path": "type",
          "regExp": null,
          "requiredValidator": [Function],
          "setters": Array [],
          "validators": Array [
            Object {
              "message": "Path \`{PATH}\` is required.",
              "type": "required",
              "validator": [Function],
            },
            Object {
              "enumValues": Array [
                "Point",
              ],
              "message": "\`{VALUE}\` is not a valid enum value for path \`{PATH}\`.",
              "type": "enum",
              "validator": [Function],
            },
          ],
          Symbol(mongoose#schemaType): true,
        },
      },
      "plugins": Array [
        Object {
          "fn": [Function],
          "opts": Object {
            "deduplicate": true,
          },
        },
      ],
      "query": Object {},
      "s": Object {
        "hooks": Kareem {
          "_posts": Map {},
          "_pres": Map {},
        },
      },
      "singleNestedPaths": Object {},
      "statics": Object {},
      "subpaths": Object {},
      "tree": Object {
        "_id": Object {
          "auto": true,
          "type": [Function],
        },
        "coordinates": Object {
          "required": true,
          "type": Array [
            [Function],
          ],
          "validate": [Function],
        },
        "id": VirtualType {
          "getters": Array [
            [Function],
          ],
          "options": Object {},
          "path": "id",
          "setters": Array [],
        },
        "type": Object {
          "default": "Point",
          "enum": Array [
            "Point",
          ],
          "required": true,
          "type": [Function],
        },
      },
      "virtuals": Object {
        "id": VirtualType {
          "getters": Array [
            [Function],
          ],
          "options": Object {},
          "path": "id",
          "setters": Array [],
        },
      },
    },
    "name": Object {
      "type": [Function],
    },
    "number": Object {
      "type": [Function],
      "validate": Object {
        "message": "{ Value } is not a legal team number",
        "validator": [Function],
      },
    },
    "registeredRegionals": Array [
      Object {
        "ref": "Regional",
        "type": [Function],
      },
    ],
  },
  "virtuals": Object {},
}
`;
